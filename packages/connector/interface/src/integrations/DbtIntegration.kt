package io.tellery.integrations

import annotations.Integration
import com.fasterxml.jackson.annotation.JsonInclude
import com.fasterxml.jackson.module.kotlin.jacksonObjectMapper
import entities.NewProfile
import io.tellery.annotations.Config
import io.tellery.connectors.annotations.DbtFields

@Integration(
    type = "dbt",
    configs = [
        Config(
            name = DbtFields.GIT_URL,
            type = Config.ConfigType.STRING,
            description = "The git url of your dbt repository. The format should be: git://[endpoint]:[organization_name]/[repo_name].git.",
            hint = "",
            required = true
        ),
        Config(
            name = DbtFields.DBT_PROJECT_NAME,
            type = Config.ConfigType.STRING,
            description = "The name of your dbt project, it should be equal with the name in dbt_project.yml.",
            hint = "",
            required = true
        ),
        Config(
            name = DbtFields.PUBLIC_KEY,
            type = Config.ConfigType.STRING,
            description = "The public key generated by tellery for dbt repository, please copy it to the 'deploy key' in git server.",
            hint = "",
            required = false
        )
    ]
)
abstract class DbtIntegration : BaseIntegration() {

    companion object {
        val mapper = jacksonObjectMapper()
    }

    protected fun getValueOrThrowException(profile: NewProfile, key: String): String {
        return profile.configs[key]
            ?: throw RuntimeException("Required key $key is not in ${profile.type} dataset profile.")
    }

    open fun transformToDbtProfile(profile: NewProfile): BaseDbtProfile {
        throw NotImplementedError("The dbt integration is not impl transformToDbtProfile method.")
    }
}

@JsonInclude(JsonInclude.Include.NON_NULL)
open class BaseDbtProfile(open val type: String)

annotation class Type(val value: String)
