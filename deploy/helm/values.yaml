# Default values for tellery.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

objectStorage:
  type: postgres
  # endpoint: https://s3.${objectStorage.region}.amazonaws.com
  # bucket: tellery-uploads
  # region: us-west-1
  # accessKey: ""
  # secretKey: ""
  # cdnEndpoint: 'https://your-own-cdn.com'

email:
  backend: smtp
  host: ""
  port: 587
  username: ""
  password: ""
  tls: false
  from: ""

postgresql:
  enabled: false
  nameOverride: postgresql
  postgresqlUsername: postgres
  postgresqlPassword: 3VHoR2p88387qRYksO2NkQ
  postgresqlDatabase: tellery
  replication:
    enabled: false
    slaveReplicas: 2
    synchronousCommit: on
    numSynchronousReplicas: 1
  persistence:
    enabled: false
    size: 20Gi

externalPostgresql:
  host: postgresql
  port: 5432
  username: postgres
  password: tellery
  database: tellery

redis:
  enabled: false
  architecture: standalone
  nameOverride: redis
  # password: redis
  auth:
    enabled: false
    ## Just omit the password field if your redis cluster doesn't use password
  master:
    persistence:
      enabled: false
      size: 20Gi

externalRedis:
  enabled: false
  ## Hostname or ip address of external redis cluster
  ##
  host: redis
  port: 6379
  ## Just omit the password field if your redis cluster doesn't use password
  # password: redis

images:
  server:
    # repository: tellery/tellery
    # tag: Chart.AppVersion
    # pullPolicy: IfNotPresent
    imagePullSecrets: []
  connector:
    # repository: tellery/connector
    # tag: Chart.AppVersion
    # pullPolicy: IfNotPresent
    imagePullSecrets: []

server:
  replicas: 1
  env: []
  probeInitialDelaySeconds: 10
  resources: {}
  # resources:
  #   requests:
  #     memory: 500Mi
  #     cpu: 200m
  #   limits:
  #     memory: 800Mi
  #     cpu: 1
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: []

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 2
    targetCPUUtilizationPercentage: 50

  service:
    name: http
    type: ClusterIP
    externalPort: 8000
    annotations: {}
    # externalIPs:
    # - 192.168.0.1
    # loadBalancerSourceRanges: []

connector:
  replicas: 1
  probeInitialDelaySeconds: 10
  resources: {}
  # resources:
  #   requests:
  #     memory: 800Mi
  #     cpu: 500m
  #   limits:
  #     memory: 1Gi
  #     cpu: 2
  affinity: {}
  nodeSelector: {}
  tolerations: []
  podLabels: []

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 2
    targetCPUUtilizationPercentage: 50

  service:
    name: http
    type: ClusterIP
    externalPort: 50051
    annotations: {}
    # externalIPs:
    # - 192.168.0.1
    # loadBalancerSourceRanges: []

ingress:
  enabled: false
  # annotations:
  #   If you are using nginx ingress controller, please use at least those 2 annotations
  #   kubernetes.io/ingress.class: nginx
  #   nginx.ingress.kubernetes.io/use-regex: "true"
  #
  # hostname: ''
  #
  # tls:
  # - secretName:
  #   hosts:

system:
  # This secretKey is used to do data encryption (it's must be given upon updates)
  secretKey: pjfJ2Cbe3sv0Gtz32Krr4A
  search:
    language: en
    # plugin: ''
  web:
    port: 80
    protocol: https
    # host: tellery.local

profile:
  create: false

init:
  user:
    create: false
    name: admin
    email: admin@tellery.local
    password: admin
  workspace:
    create: false
    name: Default